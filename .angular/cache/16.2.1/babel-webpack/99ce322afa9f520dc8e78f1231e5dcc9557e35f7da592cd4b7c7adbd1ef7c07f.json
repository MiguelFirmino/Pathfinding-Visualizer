{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nexport class DepthFirstSearchService {\n  constructor() {\n    this.iterationCount = 0;\n    this.doIteration = () => {\n      let mostRecentNode = this.unvisitedNodes.pop();\n      this.currentNode = mostRecentNode;\n      console.log(mostRecentNode);\n      // algorithm will do iteration regardless of if it's done or not\n      this.visitNode(mostRecentNode);\n      this.iterationCount += 1;\n    };\n    this.setAlgorithmValues = (start, end) => {\n      this.startingNode = start;\n      this.startingNode.pathDistance = 0;\n      this.endingNode = end;\n      this.unvisitedNodes = [this.startingNode];\n      this.iterationCount = 0;\n    };\n    this.getUnvisitedNeighbours = node => {\n      let nodeNeighbours = node.neighbours;\n      return [...nodeNeighbours.filter(neighbour => !neighbour.node.isBlocked && !neighbour.node.isVisited)];\n    };\n    // add all adjacent nodes that haven't been visited to unvisitedNodes list\n    // assign adjacent nodes distances and set current node to visited \n    this.visitNode = nodeToVisit => {\n      let unvisitedNeighbours = this.getUnvisitedNeighbours(nodeToVisit);\n      for (let {\n        node: neighbour,\n        relativeDistance\n      } of unvisitedNeighbours) {\n        neighbour.parent = nodeToVisit;\n        if (!this.unvisitedNodes.includes(neighbour)) {\n          this.unvisitedNodes.push(neighbour);\n          neighbour.isProspected = true;\n        }\n      }\n      if (nodeToVisit !== this.startingNode) {\n        nodeToVisit.isVisited = true;\n      }\n    };\n    this.checkIfDone = () => {\n      if (this.currentNode === this.endingNode) {\n        return {\n          isDone: true,\n          reason: 'reached end'\n        };\n      } else if (this.unvisitedNodes.length == 0) {\n        return {\n          isDone: true,\n          reason: 'no solution'\n        };\n      } else {\n        return {\n          isDone: false\n        };\n      }\n    };\n    // get list of nodes whose parents trace to selected node\n    this.tracePath = nodeToTrace => {\n      let pathNodes = [nodeToTrace];\n      while (nodeToTrace.parent) {\n        nodeToTrace = nodeToTrace.parent;\n        pathNodes.push(nodeToTrace);\n      }\n      return pathNodes;\n    };\n  }\n}\n_class = DepthFirstSearchService;\n_class.ɵfac = function DepthFirstSearchService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["DepthFirstSearchService","constructor","iterationCount","doIteration","mostRecentNode","unvisitedNodes","pop","currentNode","console","log","visitNode","setAlgorithmValues","start","end","startingNode","pathDistance","endingNode","getUnvisitedNeighbours","node","nodeNeighbours","neighbours","filter","neighbour","isBlocked","isVisited","nodeToVisit","unvisitedNeighbours","relativeDistance","parent","includes","push","isProspected","checkIfDone","isDone","reason","length","tracePath","nodeToTrace","pathNodes","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Miguel\\Desktop\\algorithm-visualizer\\src\\app\\node-map\\services\\algorithms\\depth-first-search.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Node } from 'src/app/node/node';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DepthFirstSearchService {\n\n  constructor() { }\n\n  startingNode: Node;\n  endingNode: Node;\n  unvisitedNodes: Node[];\n  currentNode: Node;\n  iterationCount: number = 0;\n\n  doIteration = () => {\n    let mostRecentNode = this.unvisitedNodes.pop();\n    this.currentNode = mostRecentNode;\n    console.log(mostRecentNode);\n\n    // algorithm will do iteration regardless of if it's done or not\n    this.visitNode(mostRecentNode);\n\n    this.iterationCount += 1;\n  }\n\n  setAlgorithmValues = (start: Node, end: Node) => {\n    this.startingNode = start;\n    this.startingNode.pathDistance = 0;\n    this.endingNode = end;\n    this.unvisitedNodes = [this.startingNode];\n    this.iterationCount = 0;\n  }\n\n  getUnvisitedNeighbours = (node: Node) => {\n    let nodeNeighbours = node.neighbours\n\n    return [...nodeNeighbours.filter((neighbour) => !neighbour.node.isBlocked && !neighbour.node.isVisited)];\n  }\n\n  // add all adjacent nodes that haven't been visited to unvisitedNodes list\n  // assign adjacent nodes distances and set current node to visited \n  visitNode = (nodeToVisit: Node) => {\n    let unvisitedNeighbours = this.getUnvisitedNeighbours(nodeToVisit);\n\n    for (let { node: neighbour, relativeDistance } of unvisitedNeighbours) {\n      neighbour.parent = nodeToVisit;\n\n      if (!this.unvisitedNodes.includes(neighbour)) {\n        this.unvisitedNodes.push(neighbour);\n        neighbour.isProspected = true;\n      }\n    }\n\n    if (nodeToVisit !== this.startingNode) {\n      nodeToVisit.isVisited = true;\n    }\n  }\n\n  checkIfDone = (): { isDone: boolean, reason?: string } => {\n    if (this.currentNode === this.endingNode) {\n      return { isDone: true, reason: 'reached end' };\n    } else if (this.unvisitedNodes.length == 0) {\n      return { isDone: true, reason: 'no solution' };\n    } else {\n      return { isDone: false };\n    }\n  }\n\n  // get list of nodes whose parents trace to selected node\n  tracePath = (nodeToTrace: Node) => {\n    let pathNodes = [nodeToTrace];\n\n    while (nodeToTrace.parent) {\n      nodeToTrace = nodeToTrace.parent;\n      pathNodes.push(nodeToTrace);\n    }\n\n    return pathNodes;\n  }\n}"],"mappings":";;AAMA,OAAM,MAAOA,uBAAuB;EAElCC,YAAA;IAMA,KAAAC,cAAc,GAAW,CAAC;IAE1B,KAAAC,WAAW,GAAG,MAAK;MACjB,IAAIC,cAAc,GAAG,IAAI,CAACC,cAAc,CAACC,GAAG,EAAE;MAC9C,IAAI,CAACC,WAAW,GAAGH,cAAc;MACjCI,OAAO,CAACC,GAAG,CAACL,cAAc,CAAC;MAE3B;MACA,IAAI,CAACM,SAAS,CAACN,cAAc,CAAC;MAE9B,IAAI,CAACF,cAAc,IAAI,CAAC;IAC1B,CAAC;IAED,KAAAS,kBAAkB,GAAG,CAACC,KAAW,EAAEC,GAAS,KAAI;MAC9C,IAAI,CAACC,YAAY,GAAGF,KAAK;MACzB,IAAI,CAACE,YAAY,CAACC,YAAY,GAAG,CAAC;MAClC,IAAI,CAACC,UAAU,GAAGH,GAAG;MACrB,IAAI,CAACR,cAAc,GAAG,CAAC,IAAI,CAACS,YAAY,CAAC;MACzC,IAAI,CAACZ,cAAc,GAAG,CAAC;IACzB,CAAC;IAED,KAAAe,sBAAsB,GAAIC,IAAU,IAAI;MACtC,IAAIC,cAAc,GAAGD,IAAI,CAACE,UAAU;MAEpC,OAAO,CAAC,GAAGD,cAAc,CAACE,MAAM,CAAEC,SAAS,IAAK,CAACA,SAAS,CAACJ,IAAI,CAACK,SAAS,IAAI,CAACD,SAAS,CAACJ,IAAI,CAACM,SAAS,CAAC,CAAC;IAC1G,CAAC;IAED;IACA;IACA,KAAAd,SAAS,GAAIe,WAAiB,IAAI;MAChC,IAAIC,mBAAmB,GAAG,IAAI,CAACT,sBAAsB,CAACQ,WAAW,CAAC;MAElE,KAAK,IAAI;QAAEP,IAAI,EAAEI,SAAS;QAAEK;MAAgB,CAAE,IAAID,mBAAmB,EAAE;QACrEJ,SAAS,CAACM,MAAM,GAAGH,WAAW;QAE9B,IAAI,CAAC,IAAI,CAACpB,cAAc,CAACwB,QAAQ,CAACP,SAAS,CAAC,EAAE;UAC5C,IAAI,CAACjB,cAAc,CAACyB,IAAI,CAACR,SAAS,CAAC;UACnCA,SAAS,CAACS,YAAY,GAAG,IAAI;;;MAIjC,IAAIN,WAAW,KAAK,IAAI,CAACX,YAAY,EAAE;QACrCW,WAAW,CAACD,SAAS,GAAG,IAAI;;IAEhC,CAAC;IAED,KAAAQ,WAAW,GAAG,MAA2C;MACvD,IAAI,IAAI,CAACzB,WAAW,KAAK,IAAI,CAACS,UAAU,EAAE;QACxC,OAAO;UAAEiB,MAAM,EAAE,IAAI;UAAEC,MAAM,EAAE;QAAa,CAAE;OAC/C,MAAM,IAAI,IAAI,CAAC7B,cAAc,CAAC8B,MAAM,IAAI,CAAC,EAAE;QAC1C,OAAO;UAAEF,MAAM,EAAE,IAAI;UAAEC,MAAM,EAAE;QAAa,CAAE;OAC/C,MAAM;QACL,OAAO;UAAED,MAAM,EAAE;QAAK,CAAE;;IAE5B,CAAC;IAED;IACA,KAAAG,SAAS,GAAIC,WAAiB,IAAI;MAChC,IAAIC,SAAS,GAAG,CAACD,WAAW,CAAC;MAE7B,OAAOA,WAAW,CAACT,MAAM,EAAE;QACzBS,WAAW,GAAGA,WAAW,CAACT,MAAM;QAChCU,SAAS,CAACR,IAAI,CAACO,WAAW,CAAC;;MAG7B,OAAOC,SAAS;IAClB,CAAC;EAxEe;;SAFLtC,uBAAuB;;mBAAvBA,MAAuB;AAAA;;SAAvBA,MAAuB;EAAAuC,OAAA,EAAvBvC,MAAuB,CAAAwC,IAAA;EAAAC,UAAA,EAFtB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}