{"ast":null,"code":"import { Pathfinder } from './pathfinder';\nimport * as i0 from \"@angular/core\";\nexport let DepthFirstSearchService = /*#__PURE__*/(() => {\n  var _class;\n  class DepthFirstSearchService extends Pathfinder {\n    constructor() {\n      super(...arguments);\n      this.doIteration = () => {\n        let mostRecentNode = this.unvisitedNodes.pop();\n        this.currentNode = mostRecentNode;\n        // algorithm will do iteration regardless of if it's done or not\n        this.visitNode(mostRecentNode);\n        this.iterationCount += 1;\n      };\n      // add all adjacent nodes that haven't been visited to unvisitedNodes list\n      this.visitNode = nodeToVisit => {\n        let unvisitedNeighbours = this.getUnvisitedNeighbours(nodeToVisit);\n        for (let {\n          node: neighbour\n        } of unvisitedNeighbours) {\n          neighbour.parent = nodeToVisit;\n          if (!this.unvisitedNodes.includes(neighbour)) {\n            this.unvisitedNodes.push(neighbour);\n            neighbour.isProspected = true;\n          }\n        }\n        nodeToVisit.isVisited = true;\n      };\n    }\n  }\n  _class = DepthFirstSearchService;\n  _class.ɵfac = /*@__PURE__*/function () {\n    let ɵDepthFirstSearchService_BaseFactory;\n    return function DepthFirstSearchService_Factory(t) {\n      return (ɵDepthFirstSearchService_BaseFactory || (ɵDepthFirstSearchService_BaseFactory = i0.ɵɵgetInheritedFactory(_class)))(t || _class);\n    };\n  }();\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return DepthFirstSearchService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}