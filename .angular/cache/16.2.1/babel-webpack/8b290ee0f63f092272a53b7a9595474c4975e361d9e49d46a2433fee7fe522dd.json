{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nexport class AlgorithmService {\n  constructor() {\n    this.doIteration = () => {\n      let [closestNode, index] = this.getClosestNode();\n      // algorithm is done when it reaches ending node\n      if (closestNode === this.endingNode) {} else {\n        this.visitNode(closestNode);\n        this.unvisitedNodes.splice(index, 1);\n      }\n    };\n    this.setAlgorithmValues = (start, end) => {\n      this.startingNode = start;\n      this.startingNode.distance = 0;\n      this.endingNode = end;\n      this.unvisitedNodes = [this.startingNode];\n    };\n    // get node of least distance\n    this.getClosestNode = () => {\n      let closestNode = this.unvisitedNodes[0];\n      let closestNodeIndex = undefined;\n      for (let [index, node] of this.unvisitedNodes.entries()) {\n        if (node.distance < closestNode.distance) {\n          closestNode = node;\n          closestNodeIndex = index;\n        }\n      }\n      return [closestNodeIndex, closestNode];\n    };\n    this.getUnvisitedNeighbours = node => {\n      let nodeNeighbours = node.neighbours;\n      return [...nodeNeighbours.filter(item => !item.isBlocked && !item.wasVisited)];\n    };\n    // add all adjacent nodes that haven't been visited to unvisitedNodes list\n    // assign adjacent nodes distances and set current node to visited \n    this.visitNode = nodeToVisit => {\n      let unvisitedNeighbours = this.getUnvisitedNeighbours(nodeToVisit);\n      let potentialDistance = nodeToVisit.distance + 1; // rethink this for adding diagonals\n      for (let neighbour of unvisitedNeighbours) {\n        if (neighbour.distance > potentialDistance) {\n          neighbour.distance = potentialDistance;\n          neighbour.parent = nodeToVisit;\n          this.unvisitedNodes.push(neighbour);\n        }\n      }\n      nodeToVisit.wasVisited = true;\n    };\n    // get list of nodes whose parents trace to selected node\n    this.tracePath = nodeToTrace => {\n      let pathNodes = [];\n      let pathStart = nodeToTrace;\n      while (pathStart.parent) {\n        pathStart = pathStart.parent;\n        pathNodes.push(pathStart);\n      }\n      return pathNodes;\n    };\n  }\n}\n_class = AlgorithmService;\n_class.ɵfac = function AlgorithmService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AlgorithmService","constructor","doIteration","closestNode","index","getClosestNode","endingNode","visitNode","unvisitedNodes","splice","setAlgorithmValues","start","end","startingNode","distance","closestNodeIndex","undefined","node","entries","getUnvisitedNeighbours","nodeNeighbours","neighbours","filter","item","isBlocked","wasVisited","nodeToVisit","unvisitedNeighbours","potentialDistance","neighbour","parent","push","tracePath","nodeToTrace","pathNodes","pathStart","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Miguel\\Desktop\\algorithm-visualizer\\src\\app\\node-map\\services\\algorithm.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Node } from '../../node/node';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlgorithmService {\n\n  constructor() { }\n\n  startingNode: Node;\n  endingNode: Node;\n  unvisitedNodes: Node[];\n\n  doIteration = () => {\n    let [closestNode, index ] = this.getClosestNode();\n\n    // algorithm is done when it reaches ending node\n    if (closestNode === this.endingNode) {\n\n    } else {\n      this.visitNode(closestNode);\n      this.unvisitedNodes.splice(index, 1);\n    } \n  }\n\n  setAlgorithmValues = (start: Node, end: Node) => {\n    this.startingNode = start;\n    this.startingNode.distance = 0;\n    this.endingNode = end;\n    this.unvisitedNodes = [this.startingNode];\n  }\n\n  // get node of least distance\n  getClosestNode = () => {\n    let closestNode = this.unvisitedNodes[0];\n    let closestNodeIndex = undefined;\n\n    for (let [index, node] of this.unvisitedNodes.entries()) {\n      if (node.distance < closestNode.distance) {\n          closestNode = node;\n          closestNodeIndex = index;\n      }\n    }\n\n    return [closestNodeIndex, closestNode];\n  }\n\n  getUnvisitedNeighbours = (node: Node) => {\n    let nodeNeighbours = node.neighbours\n\n    return [...nodeNeighbours.filter((item) => !item.isBlocked && !item.wasVisited)];\n  }\n\n  // add all adjacent nodes that haven't been visited to unvisitedNodes list\n  // assign adjacent nodes distances and set current node to visited \n  visitNode = (nodeToVisit: Node) => {\n    let unvisitedNeighbours = this.getUnvisitedNeighbours(nodeToVisit);\n\n    let potentialDistance = nodeToVisit.distance + 1; // rethink this for adding diagonals\n\n    for (let neighbour of unvisitedNeighbours) {\n      if (neighbour.distance > potentialDistance) {\n        neighbour.distance = potentialDistance;\n        neighbour.parent = nodeToVisit;\n        this.unvisitedNodes.push(neighbour);\n      }\n    }\n\n    nodeToVisit.wasVisited = true;\n  }\n\n  // get list of nodes whose parents trace to selected node\n  tracePath = (nodeToTrace) => {\n    let pathNodes = []\n\n    let pathStart = nodeToTrace;\n\n    while (pathStart.parent) {\n        pathStart = pathStart.parent;\n        pathNodes.push(pathStart);\n    }\n\n    return pathNodes;\n  }\n}\n"],"mappings":";;AAMA,OAAM,MAAOA,gBAAgB;EAE3BC,YAAA;IAMA,KAAAC,WAAW,GAAG,MAAK;MACjB,IAAI,CAACC,WAAW,EAAEC,KAAK,CAAE,GAAG,IAAI,CAACC,cAAc,EAAE;MAEjD;MACA,IAAIF,WAAW,KAAK,IAAI,CAACG,UAAU,EAAE,C,CAEpC,MAAM;QACL,IAAI,CAACC,SAAS,CAACJ,WAAW,CAAC;QAC3B,IAAI,CAACK,cAAc,CAACC,MAAM,CAACL,KAAK,EAAE,CAAC,CAAC;;IAExC,CAAC;IAED,KAAAM,kBAAkB,GAAG,CAACC,KAAW,EAAEC,GAAS,KAAI;MAC9C,IAAI,CAACC,YAAY,GAAGF,KAAK;MACzB,IAAI,CAACE,YAAY,CAACC,QAAQ,GAAG,CAAC;MAC9B,IAAI,CAACR,UAAU,GAAGM,GAAG;MACrB,IAAI,CAACJ,cAAc,GAAG,CAAC,IAAI,CAACK,YAAY,CAAC;IAC3C,CAAC;IAED;IACA,KAAAR,cAAc,GAAG,MAAK;MACpB,IAAIF,WAAW,GAAG,IAAI,CAACK,cAAc,CAAC,CAAC,CAAC;MACxC,IAAIO,gBAAgB,GAAGC,SAAS;MAEhC,KAAK,IAAI,CAACZ,KAAK,EAAEa,IAAI,CAAC,IAAI,IAAI,CAACT,cAAc,CAACU,OAAO,EAAE,EAAE;QACvD,IAAID,IAAI,CAACH,QAAQ,GAAGX,WAAW,CAACW,QAAQ,EAAE;UACtCX,WAAW,GAAGc,IAAI;UAClBF,gBAAgB,GAAGX,KAAK;;;MAI9B,OAAO,CAACW,gBAAgB,EAAEZ,WAAW,CAAC;IACxC,CAAC;IAED,KAAAgB,sBAAsB,GAAIF,IAAU,IAAI;MACtC,IAAIG,cAAc,GAAGH,IAAI,CAACI,UAAU;MAEpC,OAAO,CAAC,GAAGD,cAAc,CAACE,MAAM,CAAEC,IAAI,IAAK,CAACA,IAAI,CAACC,SAAS,IAAI,CAACD,IAAI,CAACE,UAAU,CAAC,CAAC;IAClF,CAAC;IAED;IACA;IACA,KAAAlB,SAAS,GAAImB,WAAiB,IAAI;MAChC,IAAIC,mBAAmB,GAAG,IAAI,CAACR,sBAAsB,CAACO,WAAW,CAAC;MAElE,IAAIE,iBAAiB,GAAGF,WAAW,CAACZ,QAAQ,GAAG,CAAC,CAAC,CAAC;MAElD,KAAK,IAAIe,SAAS,IAAIF,mBAAmB,EAAE;QACzC,IAAIE,SAAS,CAACf,QAAQ,GAAGc,iBAAiB,EAAE;UAC1CC,SAAS,CAACf,QAAQ,GAAGc,iBAAiB;UACtCC,SAAS,CAACC,MAAM,GAAGJ,WAAW;UAC9B,IAAI,CAAClB,cAAc,CAACuB,IAAI,CAACF,SAAS,CAAC;;;MAIvCH,WAAW,CAACD,UAAU,GAAG,IAAI;IAC/B,CAAC;IAED;IACA,KAAAO,SAAS,GAAIC,WAAW,IAAI;MAC1B,IAAIC,SAAS,GAAG,EAAE;MAElB,IAAIC,SAAS,GAAGF,WAAW;MAE3B,OAAOE,SAAS,CAACL,MAAM,EAAE;QACrBK,SAAS,GAAGA,SAAS,CAACL,MAAM;QAC5BI,SAAS,CAACH,IAAI,CAACI,SAAS,CAAC;;MAG7B,OAAOD,SAAS;IAClB,CAAC;EA5Ee;;SAFLlC,gBAAgB;;mBAAhBA,MAAgB;AAAA;;SAAhBA,MAAgB;EAAAoC,OAAA,EAAhBpC,MAAgB,CAAAqC,IAAA;EAAAC,UAAA,EAFf;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}