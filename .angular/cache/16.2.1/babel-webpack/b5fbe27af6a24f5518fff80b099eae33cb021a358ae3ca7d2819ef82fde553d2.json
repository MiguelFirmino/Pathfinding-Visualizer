{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nexport class DijkstraService {\n  constructor() {\n    this.iterationCount = 0;\n    this.doIteration = () => {\n      let [index, closestNode] = this.getClosestNode();\n      this.currentNode = closestNode;\n      console.log('started iteration');\n      // algorithm is done when it reaches ending node\n      if (this.checkIfDone()) {\n        console.log('(from dijkstra service) algorithm is done');\n      } else {\n        this.visitNode(closestNode);\n        this.unvisitedNodes.splice(index, 1);\n      }\n      console.log('ended iteration');\n      return closestNode;\n    };\n    this.setAlgorithmValues = (start, end) => {\n      this.startingNode = start;\n      this.startingNode.pathDistance = 0;\n      this.endingNode = end;\n      this.unvisitedNodes = [this.startingNode];\n      this.iterationCount = 0;\n    };\n    // get node of least distance\n    this.getClosestNode = () => {\n      let closestNode = this.unvisitedNodes[0];\n      let closestNodeIndex = undefined;\n      for (let [index, node] of this.unvisitedNodes.entries()) {\n        if (node.pathDistance < closestNode.pathDistance) {\n          closestNode = node;\n          closestNodeIndex = index;\n        }\n      }\n      return [closestNodeIndex, closestNode];\n    };\n    this.getUnvisitedNeighbours = node => {\n      let nodeNeighbours = node.neighbours;\n      return [...nodeNeighbours.filter(neighbour => !neighbour.node.isBlocked && !neighbour.node.isVisited)];\n    };\n    // add all adjacent nodes that haven't been visited to unvisitedNodes list\n    // assign adjacent nodes distances and set current node to visited \n    this.visitNode = nodeToVisit => {\n      let unvisitedNeighbours = this.getUnvisitedNeighbours(nodeToVisit);\n      for (let {\n        node: neighbour,\n        relativeDistance\n      } of unvisitedNeighbours) {\n        let potentialDistance = nodeToVisit.pathDistance + relativeDistance;\n        if (neighbour.pathDistance > potentialDistance) {\n          neighbour.pathDistance = potentialDistance;\n          neighbour.parent = nodeToVisit;\n          if (!this.unvisitedNodes.includes(neighbour)) {\n            this.unvisitedNodes.push(neighbour);\n            neighbour.isProspected = true;\n          }\n        }\n      }\n      if (nodeToVisit !== this.startingNode) {\n        nodeToVisit.isVisited = true;\n      }\n    };\n    this.checkIfDone = () => {\n      if (this.currentNode == this.endingNode) {\n        return {\n          isDone: true,\n          reason: 'reached end'\n        };\n      } else if (this.unvisitedNodes.length == 0) {\n        return {\n          isDone: true,\n          reason: 'no solution'\n        };\n      } else {\n        return {\n          isDone: false\n        };\n      }\n    };\n    // get list of nodes whose parents trace to selected node\n    this.tracePath = nodeToTrace => {\n      let pathNodes = [nodeToTrace];\n      while (nodeToTrace.parent) {\n        nodeToTrace = nodeToTrace.parent;\n        pathNodes.push(nodeToTrace);\n      }\n      return pathNodes;\n    };\n  }\n}\n_class = DijkstraService;\n_class.ɵfac = function DijkstraService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["DijkstraService","constructor","iterationCount","doIteration","index","closestNode","getClosestNode","currentNode","console","log","checkIfDone","visitNode","unvisitedNodes","splice","setAlgorithmValues","start","end","startingNode","pathDistance","endingNode","closestNodeIndex","undefined","node","entries","getUnvisitedNeighbours","nodeNeighbours","neighbours","filter","neighbour","isBlocked","isVisited","nodeToVisit","unvisitedNeighbours","relativeDistance","potentialDistance","parent","includes","push","isProspected","isDone","reason","length","tracePath","nodeToTrace","pathNodes","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Miguel\\Desktop\\algorithm-visualizer\\src\\app\\node-map\\services\\algorithms\\dijkstra.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Node } from '../../../node/node';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DijkstraService {\n\n  constructor() { }\n\n  startingNode: Node;\n  endingNode: Node;\n  unvisitedNodes: Node[];\n  currentNode: Node;\n  iterationCount: number = 0;\n\n  doIteration = (): undefined | Node => {\n    let [index, closestNode] = this.getClosestNode();\n    this.currentNode = closestNode;\n\n    console.log('started iteration');\n    // algorithm is done when it reaches ending node\n    if (this.checkIfDone()) {\n      console.log('(from dijkstra service) algorithm is done');\n    } else {\n      this.visitNode(closestNode);\n      this.unvisitedNodes.splice(index, 1);\n    } \n    console.log('ended iteration');\n\n    return closestNode;\n  }\n\n  setAlgorithmValues = (start: Node, end: Node) => {\n    this.startingNode = start;\n    this.startingNode.pathDistance = 0;\n    this.endingNode = end;\n    this.unvisitedNodes = [this.startingNode];\n    this.iterationCount = 0;\n  }\n\n  // get node of least distance\n  getClosestNode = () => {\n    let closestNode = this.unvisitedNodes[0];\n    let closestNodeIndex = undefined;\n\n    for (let [index, node] of this.unvisitedNodes.entries()) {\n      if (node.pathDistance < closestNode.pathDistance) {\n          closestNode = node;\n          closestNodeIndex = index;\n      }\n    }\n\n    return [closestNodeIndex, closestNode];\n  }\n\n  getUnvisitedNeighbours = (node: Node) => {\n    let nodeNeighbours = node.neighbours\n\n    return [...nodeNeighbours.filter((neighbour) => !neighbour.node.isBlocked && !neighbour.node.isVisited)];\n  }\n\n  // add all adjacent nodes that haven't been visited to unvisitedNodes list\n  // assign adjacent nodes distances and set current node to visited \n  visitNode = (nodeToVisit: Node) => {\n    let unvisitedNeighbours = this.getUnvisitedNeighbours(nodeToVisit);\n\n    for (let { node: neighbour, relativeDistance } of unvisitedNeighbours) {\n      let potentialDistance = nodeToVisit.pathDistance + relativeDistance;\n\n      if (neighbour.pathDistance > potentialDistance) {\n        neighbour.pathDistance = potentialDistance;\n        neighbour.parent = nodeToVisit;\n\n        if (!this.unvisitedNodes.includes(neighbour)) {\n          this.unvisitedNodes.push(neighbour);\n          neighbour.isProspected = true;\n        }\n      }\n    }\n\n    if (nodeToVisit !== this.startingNode) {\n      nodeToVisit.isVisited = true;\n    }\n  }\n\n  checkIfDone = (): { isDone: boolean, reason?: string } => {\n    if (this.currentNode == this.endingNode) {\n      return { isDone: true, reason: 'reached end' };\n    } else if (this.unvisitedNodes.length == 0) {\n      return { isDone: true, reason: 'no solution' };\n    } else {\n      return { isDone: false };\n    }\n  }\n\n  // get list of nodes whose parents trace to selected node\n  tracePath = (nodeToTrace: Node) => {\n    let pathNodes = [nodeToTrace];\n\n    while (nodeToTrace.parent) {\n      nodeToTrace = nodeToTrace.parent;\n      pathNodes.push(nodeToTrace);\n    }\n\n    return pathNodes;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}