{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nexport class DijkstraService {\n  constructor() {\n    this.iterationCount = 0;\n    this.doIteration = () => {\n      let [index, closestNode] = this.getClosestNode();\n      // algorithm is done when it reaches ending node\n      if (closestNode !== this.endingNode) {\n        this.visitNode(closestNode);\n        this.unvisitedNodes.splice(index, 1);\n      } else {\n        console.log('(from dijkstra service) algorithm is done');\n      }\n      let path = this.tracePath(closestNode);\n      return path;\n    };\n    this.setAlgorithmValues = (start, end) => {\n      this.startingNode = start;\n      this.startingNode.pathDistance = 0;\n      this.endingNode = end;\n      this.unvisitedNodes = [this.startingNode];\n      this.iterationCount = 0;\n    };\n    // get node of least distance\n    this.getClosestNode = () => {\n      let closestNode = this.unvisitedNodes[0];\n      let closestNodeIndex = undefined;\n      for (let [index, node] of this.unvisitedNodes.entries()) {\n        if (node.pathDistance < closestNode.pathDistance) {\n          closestNode = node;\n          closestNodeIndex = index;\n        }\n      }\n      return [closestNodeIndex, closestNode];\n    };\n    this.getUnvisitedNeighbours = node => {\n      let nodeNeighbours = node.neighbours;\n      return [...nodeNeighbours.filter(neighbour => !neighbour.node.isBlocked && !neighbour.node.wasVisited)];\n    };\n    // add all adjacent nodes that haven't been visited to unvisitedNodes list\n    // assign adjacent nodes distances and set current node to visited \n    this.visitNode = nodeToVisit => {\n      let unvisitedNeighbours = this.getUnvisitedNeighbours(nodeToVisit);\n      for (let {\n        node: neighbour,\n        relativeDistance\n      } of unvisitedNeighbours) {\n        let potentialDistance = nodeToVisit.pathDistance + relativeDistance;\n        if (neighbour.pathDistance > potentialDistance) {\n          neighbour.pathDistance = potentialDistance;\n          neighbour.parent = nodeToVisit;\n          if (!this.unvisitedNodes.includes(neighbour)) {\n            this.unvisitedNodes.push(neighbour);\n          }\n        }\n      }\n      if (nodeToVisit !== this.startingNode) {\n        nodeToVisit.wasVisited = true;\n      }\n    };\n    // get list of nodes whose parents trace to selected node\n    this.tracePath = nodeToTrace => {\n      let pathNodes = [];\n      let pathStart = nodeToTrace;\n      while (pathStart.parent != this.startingNode) {\n        pathStart = pathStart.parent;\n        pathNodes.push(pathStart);\n      }\n      return pathNodes;\n    };\n  }\n}\n_class = DijkstraService;\n_class.ɵfac = function DijkstraService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["DijkstraService","constructor","iterationCount","doIteration","index","closestNode","getClosestNode","endingNode","visitNode","unvisitedNodes","splice","console","log","path","tracePath","setAlgorithmValues","start","end","startingNode","pathDistance","closestNodeIndex","undefined","node","entries","getUnvisitedNeighbours","nodeNeighbours","neighbours","filter","neighbour","isBlocked","wasVisited","nodeToVisit","unvisitedNeighbours","relativeDistance","potentialDistance","parent","includes","push","nodeToTrace","pathNodes","pathStart","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Miguel\\Desktop\\algorithm-visualizer\\src\\app\\node-map\\services\\algorithms\\dijkstra.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Node } from '../../../node/node';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DijkstraService {\n\n  constructor() { }\n\n  startingNode: Node;\n  endingNode: Node;\n  unvisitedNodes: Node[];\n  iterationCount: number = 0;\n\n  doIteration = () => {\n    let [index, closestNode] = this.getClosestNode();\n\n    // algorithm is done when it reaches ending node\n    if (closestNode !== this.endingNode) {\n      this.visitNode(closestNode);\n      this.unvisitedNodes.splice(index, 1);\n    } else {\n      console.log('(from dijkstra service) algorithm is done');\n    } \n\n    let path = this.tracePath(closestNode);\n    return path;\n  }\n\n  setAlgorithmValues = (start: Node, end: Node) => {\n    this.startingNode = start;\n    this.startingNode.pathDistance = 0;\n    this.endingNode = end;\n    this.unvisitedNodes = [this.startingNode];\n    this.iterationCount = 0;\n  }\n\n  // get node of least distance\n  getClosestNode = () => {\n    let closestNode = this.unvisitedNodes[0];\n    let closestNodeIndex = undefined;\n\n    for (let [index, node] of this.unvisitedNodes.entries()) {\n      if (node.pathDistance < closestNode.pathDistance) {\n          closestNode = node;\n          closestNodeIndex = index;\n      }\n    }\n\n    return [closestNodeIndex, closestNode];\n  }\n\n  getUnvisitedNeighbours = (node: Node) => {\n    let nodeNeighbours = node.neighbours\n\n    return [...nodeNeighbours.filter((neighbour) => !neighbour.node.isBlocked && !neighbour.node.wasVisited)];\n  }\n\n  // add all adjacent nodes that haven't been visited to unvisitedNodes list\n  // assign adjacent nodes distances and set current node to visited \n  visitNode = (nodeToVisit: Node) => {\n    let unvisitedNeighbours = this.getUnvisitedNeighbours(nodeToVisit);\n\n    for (let { node: neighbour, relativeDistance } of unvisitedNeighbours) {\n      let potentialDistance = nodeToVisit.pathDistance + relativeDistance;\n\n      if (neighbour.pathDistance > potentialDistance) {\n        neighbour.pathDistance = potentialDistance;\n        neighbour.parent = nodeToVisit;\n\n        if (!this.unvisitedNodes.includes(neighbour)) {\n          this.unvisitedNodes.push(neighbour);\n        }\n      }\n    }\n\n    if (nodeToVisit !== this.startingNode) {\n      nodeToVisit.wasVisited = true;\n    }\n  }\n\n  // get list of nodes whose parents trace to selected node\n  tracePath = (nodeToTrace: Node) => {\n    let pathNodes = []\n\n    let pathStart = nodeToTrace;\n\n    while (pathStart.parent != this.startingNode) {\n        pathStart = pathStart.parent;\n        pathNodes.push(pathStart);\n    }\n\n    return pathNodes;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}