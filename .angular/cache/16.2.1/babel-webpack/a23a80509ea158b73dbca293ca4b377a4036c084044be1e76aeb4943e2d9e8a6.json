{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nexport class AlgorithmService {\n  constructor() {\n    this.doIteration = (doHeuristics, manhattanWeight) => {\n      let [index, closestNode] = this.getClosestNode();\n      // algorithm is done when it reaches ending node\n      if (closestNode !== this.endingNode) {\n        this.visitNode(closestNode, doHeuristics, manhattanWeight);\n        this.unvisitedNodes.splice(index, 1);\n      } else {\n        let path = this.tracePath(closestNode);\n        for (let node of path) {\n          node.isPath = true;\n        }\n      }\n    };\n    this.setAlgorithmValues = (start, end) => {\n      this.startingNode = start;\n      this.startingNode.distance = 0;\n      this.endingNode = end;\n      this.unvisitedNodes = [this.startingNode];\n    };\n    // get node of least distance\n    this.getClosestNode = () => {\n      let closestNode = this.unvisitedNodes[0];\n      let closestNodeIndex = undefined;\n      for (let [index, node] of this.unvisitedNodes.entries()) {\n        if (node.distance < closestNode.distance) {\n          closestNode = node;\n          closestNodeIndex = index;\n        }\n      }\n      return [closestNodeIndex, closestNode];\n    };\n    this.getUnvisitedNeighbours = node => {\n      let nodeNeighbours = node.neighbours;\n      return [...nodeNeighbours.filter(neighbour => !neighbour.node.isBlocked && !neighbour.node.wasVisited)];\n    };\n    // add all adjacent nodes that haven't been visited to unvisitedNodes list\n    // assign adjacent nodes distances and set current node to visited \n    this.visitNode = (nodeToVisit, doHeuristics, manhattanWeight) => {\n      let unvisitedNeighbours = this.getUnvisitedNeighbours(nodeToVisit);\n      for (let {\n        node: neighbour,\n        relativeDistance\n      } of unvisitedNeighbours) {\n        let potentialDistance = nodeToVisit.distance + relativeDistance;\n        if (doHeuristics) {\n          let manhattanDistance = Math.abs(neighbour.xPosition - this.endingNode.xPosition) + Math.abs(neighbour.xPosition - this.endingNode.yPosition);\n          potentialDistance += manhattanDistance * manhattanWeight;\n        }\n        if (neighbour.distance > potentialDistance) {\n          neighbour.distance = potentialDistance;\n          neighbour.parent = nodeToVisit;\n          // if (!this.unvisitedNodes.includes(neighbour)) {\n          //   this.unvisitedNodes.push(neighbour);\n          // }\n          this.unvisitedNodes.push(neighbour);\n        }\n      }\n      if (nodeToVisit !== this.startingNode) {\n        nodeToVisit.wasVisited = true;\n      }\n    };\n    // get list of nodes whose parents trace to selected node\n    this.tracePath = nodeToTrace => {\n      let pathNodes = [];\n      let pathStart = nodeToTrace;\n      while (pathStart.parent != this.startingNode) {\n        pathStart = pathStart.parent;\n        pathNodes.push(pathStart);\n      }\n      return pathNodes;\n    };\n  }\n}\n_class = AlgorithmService;\n_class.ɵfac = function AlgorithmService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AlgorithmService","constructor","doIteration","doHeuristics","manhattanWeight","index","closestNode","getClosestNode","endingNode","visitNode","unvisitedNodes","splice","path","tracePath","node","isPath","setAlgorithmValues","start","end","startingNode","distance","closestNodeIndex","undefined","entries","getUnvisitedNeighbours","nodeNeighbours","neighbours","filter","neighbour","isBlocked","wasVisited","nodeToVisit","unvisitedNeighbours","relativeDistance","potentialDistance","manhattanDistance","Math","abs","xPosition","yPosition","parent","push","nodeToTrace","pathNodes","pathStart","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Miguel\\Desktop\\algorithm-visualizer\\src\\app\\node-map\\services\\algorithm.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Node } from '../../node/node';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlgorithmService {\n\n  constructor() { }\n\n  startingNode: Node;\n  endingNode: Node;\n  unvisitedNodes: Node[];\n\n  doIteration = (doHeuristics: boolean, manhattanWeight: number) => {\n    let [index, closestNode] = this.getClosestNode();\n\n    // algorithm is done when it reaches ending node\n    if (closestNode !== this.endingNode) {\n      this.visitNode(closestNode, doHeuristics, manhattanWeight);\n      this.unvisitedNodes.splice(index, 1);\n    } else {\n      let path = this.tracePath(closestNode);\n      for (let node of path) {\n        node.isPath = true;\n      }\n    } \n  }\n\n  setAlgorithmValues = (start: Node, end: Node) => {\n    this.startingNode = start;\n    this.startingNode.distance = 0;\n    this.endingNode = end;\n    this.unvisitedNodes = [this.startingNode];\n  }\n\n  // get node of least distance\n  getClosestNode = () => {\n    let closestNode = this.unvisitedNodes[0];\n    let closestNodeIndex = undefined;\n\n    for (let [index, node] of this.unvisitedNodes.entries()) {\n      if (node.distance < closestNode.distance) {\n          closestNode = node;\n          closestNodeIndex = index;\n      }\n    }\n\n    return [closestNodeIndex, closestNode];\n  }\n\n  getUnvisitedNeighbours = (node: Node) => {\n    let nodeNeighbours = node.neighbours\n\n    return [...nodeNeighbours.filter((neighbour) => !neighbour.node.isBlocked && !neighbour.node.wasVisited)];\n  }\n\n  // add all adjacent nodes that haven't been visited to unvisitedNodes list\n  // assign adjacent nodes distances and set current node to visited \n  visitNode = (nodeToVisit: Node, doHeuristics?: boolean, manhattanWeight?: number) => {\n    let unvisitedNeighbours = this.getUnvisitedNeighbours(nodeToVisit);\n\n    for (let { node: neighbour, relativeDistance } of unvisitedNeighbours) {\n      let potentialDistance = nodeToVisit.distance + relativeDistance;\n      if (doHeuristics) {\n        let manhattanDistance = Math.abs(neighbour.xPosition - this.endingNode.xPosition) + Math.abs(neighbour.xPosition - this.endingNode.yPosition);\n        potentialDistance += (manhattanDistance * manhattanWeight)\n      }\n\n      if (neighbour.distance > potentialDistance) {\n        neighbour.distance = potentialDistance;\n        neighbour.parent = nodeToVisit;\n\n        // if (!this.unvisitedNodes.includes(neighbour)) {\n        //   this.unvisitedNodes.push(neighbour);\n        // }\n\n        this.unvisitedNodes.push(neighbour);\n      }\n    }\n\n    if (nodeToVisit !== this.startingNode) {\n      nodeToVisit.wasVisited = true;\n    }\n  }\n\n  // get list of nodes whose parents trace to selected node\n  tracePath = (nodeToTrace: Node) => {\n    let pathNodes = []\n\n    let pathStart = nodeToTrace;\n\n    while (pathStart.parent != this.startingNode) {\n        pathStart = pathStart.parent;\n        pathNodes.push(pathStart);\n    }\n\n    return pathNodes;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}